{"ast":null,"code":"import axios from 'axios';\nimport { loadUserRequest, loadUserSuccess, loadUserFail } from '../userSlice'; // Adjust the import path\n\n// Thunk action to get user data\nexport const GetUser = () => async dispatch => {\n  dispatch(loadUserRequest());\n  try {\n    const response = await axios.get('http://localhost:5001/api/logedin/user', {\n      withCredentials: true\n    });\n\n    // Assuming response.data.user contains the user data\n    dispatch(loadUserSuccess(response.data.user));\n  } catch (error) {\n    dispatch(loadUserFail('Failed to load user')); // Or use a more descriptive message based on error\n  }\n};\nexport default GetUser;","map":{"version":3,"names":["axios","loadUserRequest","loadUserSuccess","loadUserFail","GetUser","dispatch","response","get","withCredentials","data","user","error"],"sources":["/Users/mohammedamsith/Desktop/A/Projects/MERN/Seperate/google auth, mailtrap, node, TypeScript  copy/frontend/src/components/store/action/actions.tsx"],"sourcesContent":["import { Dispatch } from 'redux';\nimport axios from 'axios';\nimport { loadUserRequest, loadUserSuccess, loadUserFail } from '../userSlice'; // Adjust the import path\n\n\n// Thunk action to get user data\nexport const GetUser = () => async (dispatch: Dispatch) => {\n  dispatch(loadUserRequest());\n  \n  try {\n    const response = await axios.get('http://localhost:5001/api/logedin/user', {\n      withCredentials: true\n    });\n    \n    // Assuming response.data.user contains the user data\n    dispatch(loadUserSuccess(response.data.user));\n  } catch (error) {\n    dispatch(loadUserFail('Failed to load user')); // Or use a more descriptive message based on error\n  }\n};\n\n\nexport default GetUser"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,EAAEC,eAAe,EAAEC,YAAY,QAAQ,cAAc,CAAC,CAAC;;AAG/E;AACA,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM,MAAOC,QAAkB,IAAK;EACzDA,QAAQ,CAACJ,eAAe,CAAC,CAAC,CAAC;EAE3B,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,wCAAwC,EAAE;MACzEC,eAAe,EAAE;IACnB,CAAC,CAAC;;IAEF;IACAH,QAAQ,CAACH,eAAe,CAACI,QAAQ,CAACG,IAAI,CAACC,IAAI,CAAC,CAAC;EAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdN,QAAQ,CAACF,YAAY,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;EACjD;AACF,CAAC;AAGD,eAAeC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}