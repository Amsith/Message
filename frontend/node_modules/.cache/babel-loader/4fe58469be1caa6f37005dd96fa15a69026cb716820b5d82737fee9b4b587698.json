{"ast":null,"code":"import axios from 'axios';\nimport { loadUserRequest, loadUserSuccess, loadUserFail } from '../userSlice'; // Adjust the import path as needed\n\nconst GetUser = () => {\n  const fetchUser = async () => {\n    try {\n      dispatch(loadUserRequest());\n\n      // Specify the expected response structure\n      const response = await axios.get('http://localhost:5001/api/logedin/user', {\n        withCredentials: true\n      });\n\n      // Access the nested user object correctly\n      dispatch(loadUserSuccess(response.data.user));\n    } catch (error) {\n      var _axiosError$response, _axiosError$response$;\n      const axiosError = error; // Use AxiosError with ErrorResponse type\n\n      // Safely access the message property\n      const errorMessage = ((_axiosError$response = axiosError.response) === null || _axiosError$response === void 0 ? void 0 : (_axiosError$response$ = _axiosError$response.data) === null || _axiosError$response$ === void 0 ? void 0 : _axiosError$response$.message) || 'Failed to fetch user';\n      console.error(errorMessage);\n      dispatch(loadUserFail(errorMessage));\n    }\n  };\n  return {\n    fetchUser\n  };\n};\n_c = GetUser;\nexport default GetUser;\nvar _c;\n$RefreshReg$(_c, \"GetUser\");","map":{"version":3,"names":["axios","loadUserRequest","loadUserSuccess","loadUserFail","GetUser","fetchUser","dispatch","response","get","withCredentials","data","user","error","_axiosError$response","_axiosError$response$","axiosError","errorMessage","message","console","_c","$RefreshReg$"],"sources":["/Users/mohammedamsith/Desktop/A/Projects/MERN/Seperate/google auth, mailtrap, node, TypeScript  copy/frontend/src/components/store/action/actions.tsx"],"sourcesContent":["import axios, { AxiosError } from 'axios';\nimport { useDispatch } from 'react-redux';\nimport { loadUserRequest, loadUserSuccess, loadUserFail } from '../userSlice'; // Adjust the import path as needed\n\ninterface ErrorResponse {\n    message: string;\n}\n\nconst GetUser = () => {\n\n    const fetchUser = async () => {\n        try {\n            dispatch(loadUserRequest());\n\n            // Specify the expected response structure\n            const response = await axios.get<{ user: any }>(\n                'http://localhost:5001/api/logedin/user',\n                { withCredentials: true }\n            );\n\n            // Access the nested user object correctly\n            dispatch(loadUserSuccess(response.data.user));\n        } catch (error) {\n            const axiosError = error as AxiosError<ErrorResponse>; // Use AxiosError with ErrorResponse type\n\n            // Safely access the message property\n            const errorMessage = axiosError.response?.data?.message || 'Failed to fetch user';\n            console.error(errorMessage);\n\n            dispatch(loadUserFail(errorMessage));\n        }\n    };\n\n    return { fetchUser };\n};\n\nexport default GetUser;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAsB,OAAO;AAEzC,SAASC,eAAe,EAAEC,eAAe,EAAEC,YAAY,QAAQ,cAAc,CAAC,CAAC;;AAM/E,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAElB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACAC,QAAQ,CAACL,eAAe,CAAC,CAAC,CAAC;;MAE3B;MACA,MAAMM,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAC5B,wCAAwC,EACxC;QAAEC,eAAe,EAAE;MAAK,CAC5B,CAAC;;MAED;MACAH,QAAQ,CAACJ,eAAe,CAACK,QAAQ,CAACG,IAAI,CAACC,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,oBAAA,EAAAC,qBAAA;MACZ,MAAMC,UAAU,GAAGH,KAAkC,CAAC,CAAC;;MAEvD;MACA,MAAMI,YAAY,GAAG,EAAAH,oBAAA,GAAAE,UAAU,CAACR,QAAQ,cAAAM,oBAAA,wBAAAC,qBAAA,GAAnBD,oBAAA,CAAqBH,IAAI,cAAAI,qBAAA,uBAAzBA,qBAAA,CAA2BG,OAAO,KAAI,sBAAsB;MACjFC,OAAO,CAACN,KAAK,CAACI,YAAY,CAAC;MAE3BV,QAAQ,CAACH,YAAY,CAACa,YAAY,CAAC,CAAC;IACxC;EACJ,CAAC;EAED,OAAO;IAAEX;EAAU,CAAC;AACxB,CAAC;AAACc,EAAA,GA1BIf,OAAO;AA4Bb,eAAeA,OAAO;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}