{"ast":null,"code":"var _jsxFileName = \"/Users/mohammedamsith/Desktop/A/Projects/MERN/Seperate/google auth, mailtrap, node, TypeScript  copy/frontend/src/components/protectedRoute/ProtectedRoute.tsx\";\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  user,\n  allowedRoles,\n  children\n}) => {\n  // If the user data is still loading, you can show a loading indicator\n  if (user === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If the user is not authenticated or doesn't have the right role, redirect to login\n  if (!user || !allowedRoles.includes(user.userRole)) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If authenticated and the role is allowed, render the children components\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedRoute","user","allowedRoles","children","fileName","_jsxFileName","lineNumber","columnNumber","includes","userRole","to","replace","_c","$RefreshReg$"],"sources":["/Users/mohammedamsith/Desktop/A/Projects/MERN/Seperate/google auth, mailtrap, node, TypeScript  copy/frontend/src/components/protectedRoute/ProtectedRoute.tsx"],"sourcesContent":["import { Navigate } from 'react-router-dom';\n\ntype ProtectedRouteProps = {\n  user: any; // User data\n  allowedRoles: string[]; // Roles that are allowed to access the route\n  children: React.ReactNode; // Represents the children components\n};\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ user, allowedRoles, children }) => {\n  // If the user data is still loading, you can show a loading indicator\n  if (user === null) {\n    return <div>Loading...</div>;\n  }\n\n  // If the user is not authenticated or doesn't have the right role, redirect to login\n  if (!user || !allowedRoles.includes(user.userRole)) {\n    return <Navigate to=\"/\" replace />;\n  }\n\n  // If authenticated and the role is allowed, render the children components\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAQ5C,MAAMC,cAA6C,GAAGA,CAAC;EAAEC,IAAI;EAAEC,YAAY;EAAEC;AAAS,CAAC,KAAK;EAC1F;EACA,IAAIF,IAAI,KAAK,IAAI,EAAE;IACjB,oBAAOJ,OAAA;MAAAM,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,IAAI,CAACN,IAAI,IAAI,CAACC,YAAY,CAACM,QAAQ,CAACP,IAAI,CAACQ,QAAQ,CAAC,EAAE;IAClD,oBAAOZ,OAAA,CAACF,QAAQ;MAACe,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpC;;EAEA;EACA,oBAAOV,OAAA,CAAAE,SAAA;IAAAI,QAAA,EAAGA;EAAQ,gBAAG,CAAC;AACxB,CAAC;AAACS,EAAA,GAbIZ,cAA6C;AAenD,eAAeA,cAAc;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}