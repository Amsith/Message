{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Define the initial state for the user\n\nconst initialState = {\n  user: null,\n  loading: false,\n  error: null,\n  isAuthenticated: false // Initially, the user is not authenticated\n};\n\n// Create a slice for the user\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  // Use the initialState variable instead of hardcoding\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload;\n      state.isAuthenticated = true;\n      state.loading = false; // Correctly set isAuthenticated to true\n      console.log(\"redux data:\", state.user);\n      console.log(\"Isauthenticate from:\", state.isAuthenticated);\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.isAuthenticated = false;\n      state.loading = false;\n    },\n    loadUserRequest: state => {\n      state.user = null; // Clear any existing user data\n      state.isAuthenticated = false; // User is not authenticated during the request\n      state.loading = true; // Set loading to true\n    },\n    loadUserSuccess: (state, action) => {\n      state.user = action.payload; // Set the user data from the payload\n      state.isAuthenticated = true; // Mark the user as authenticated\n      state.loading = false; // Stop the loading state\n    },\n    loadUserFail: (state, action) => {\n      state.error = action.payload; // Store the error message in the state\n      state.user = null; // Clear any user data\n      state.isAuthenticated = false; // Mark as not authenticated\n      state.loading = false; // Stop the loading state\n    },\n    logoutSuccess: state => {\n      state.user = null; // Clear the user data on logout\n      state.isAuthenticated = false; // Set isAuthenticated to false on logout\n    },\n    logoutFail: (state, action) => {\n      state.error = action.payload; // Store the error message\n      state.isAuthenticated = true;\n    },\n    messageFail: (state, action) => {\n      state.error = action.payload; // Store the error message\n      state.user = null;\n      state.isAuthenticated = false;\n    }\n  }\n});\nexport const {\n  setUser,\n  setError,\n  logoutSuccess,\n  logoutFail,\n  loadUserRequest,\n  loadUserSuccess,\n  loadUserFail\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","user","loading","error","isAuthenticated","userSlice","name","reducers","setUser","state","action","payload","console","log","setError","loadUserRequest","loadUserSuccess","loadUserFail","logoutSuccess","logoutFail","messageFail","actions","reducer"],"sources":["/Users/mohammedamsith/Desktop/A/Projects/MERN/Seperate/google auth, mailtrap, node, TypeScript 1 copy /frontend/src/components/store/userSlice.tsx"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// Define the initial state for the user\ninterface UserState {\n    user: any | null; // Initially, there is no user logged in\n    loading: boolean;\n    error: string | null;\n    isAuthenticated: boolean;  // You need to include this in the state\n}\n\nconst initialState: UserState = {\n    user: null,\n    loading: false,\n    error: null,\n    isAuthenticated: false,  // Initially, the user is not authenticated\n};\n\n// Create a slice for the user\nconst userSlice = createSlice({\n    name: 'user',\n    initialState,  // Use the initialState variable instead of hardcoding\n    reducers: {\n        setUser: (state, action: PayloadAction<any>) => {\n            state.user = action.payload;\n            state.isAuthenticated = true;\n            state.loading = false; // Correctly set isAuthenticated to true\n            console.log(\"redux data:\", state.user);\n            console.log(\"Isauthenticate from:\", state.isAuthenticated)\n        },\n        setError: (state, action: PayloadAction<string | null>) => {\n            state.error = action.payload;\n            state.isAuthenticated = false;\n            state.loading = false;\n        },\n        loadUserRequest: (state) => {\n            state.user = null; // Clear any existing user data\n            state.isAuthenticated = false; // User is not authenticated during the request\n            state.loading = true; // Set loading to true\n        },\n        loadUserSuccess: (state, action: PayloadAction<any>) => {\n            state.user = action.payload; // Set the user data from the payload\n            state.isAuthenticated = true; // Mark the user as authenticated\n            state.loading = false; // Stop the loading state\n        },\n        loadUserFail: (state, action: PayloadAction<string | null>) => {\n            state.error = action.payload; // Store the error message in the state\n            state.user = null; // Clear any user data\n            state.isAuthenticated = false; // Mark as not authenticated\n            state.loading = false; // Stop the loading state\n        }, \n        logoutSuccess: (state) => {\n            state.user = null; // Clear the user data on logout\n            state.isAuthenticated = false; // Set isAuthenticated to false on logout\n        },\n        logoutFail: (state, action: PayloadAction<string | null>) => {\n            state.error = action.payload; // Store the error message\n            state.isAuthenticated = true;\n        },\n        messageFail: (state, action: PayloadAction<string | null>) => {\n            state.error = action.payload; // Store the error message\n            state.user = null;\n            state.isAuthenticated = false;\n        },\n\n    },\n});\n\nexport const { setUser, setError, logoutSuccess,logoutFail,loadUserRequest,loadUserSuccess, loadUserFail,} = userSlice.actions;\n\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;;AAE7D;;AAQA,MAAMC,YAAuB,GAAG;EAC5BC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,eAAe,EAAE,KAAK,CAAG;AAC7B,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC1BO,IAAI,EAAE,MAAM;EACZN,YAAY;EAAG;EACfO,QAAQ,EAAE;IACNC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAA0B,KAAK;MAC5CD,KAAK,CAACR,IAAI,GAAGS,MAAM,CAACC,OAAO;MAC3BF,KAAK,CAACL,eAAe,GAAG,IAAI;MAC5BK,KAAK,CAACP,OAAO,GAAG,KAAK,CAAC,CAAC;MACvBU,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEJ,KAAK,CAACR,IAAI,CAAC;MACtCW,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,KAAK,CAACL,eAAe,CAAC;IAC9D,CAAC;IACDU,QAAQ,EAAEA,CAACL,KAAK,EAAEC,MAAoC,KAAK;MACvDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO;MAC5BF,KAAK,CAACL,eAAe,GAAG,KAAK;MAC7BK,KAAK,CAACP,OAAO,GAAG,KAAK;IACzB,CAAC;IACDa,eAAe,EAAGN,KAAK,IAAK;MACxBA,KAAK,CAACR,IAAI,GAAG,IAAI,CAAC,CAAC;MACnBQ,KAAK,CAACL,eAAe,GAAG,KAAK,CAAC,CAAC;MAC/BK,KAAK,CAACP,OAAO,GAAG,IAAI,CAAC,CAAC;IAC1B,CAAC;IACDc,eAAe,EAAEA,CAACP,KAAK,EAAEC,MAA0B,KAAK;MACpDD,KAAK,CAACR,IAAI,GAAGS,MAAM,CAACC,OAAO,CAAC,CAAC;MAC7BF,KAAK,CAACL,eAAe,GAAG,IAAI,CAAC,CAAC;MAC9BK,KAAK,CAACP,OAAO,GAAG,KAAK,CAAC,CAAC;IAC3B,CAAC;IACDe,YAAY,EAAEA,CAACR,KAAK,EAAEC,MAAoC,KAAK;MAC3DD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO,CAAC,CAAC;MAC9BF,KAAK,CAACR,IAAI,GAAG,IAAI,CAAC,CAAC;MACnBQ,KAAK,CAACL,eAAe,GAAG,KAAK,CAAC,CAAC;MAC/BK,KAAK,CAACP,OAAO,GAAG,KAAK,CAAC,CAAC;IAC3B,CAAC;IACDgB,aAAa,EAAGT,KAAK,IAAK;MACtBA,KAAK,CAACR,IAAI,GAAG,IAAI,CAAC,CAAC;MACnBQ,KAAK,CAACL,eAAe,GAAG,KAAK,CAAC,CAAC;IACnC,CAAC;IACDe,UAAU,EAAEA,CAACV,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO,CAAC,CAAC;MAC9BF,KAAK,CAACL,eAAe,GAAG,IAAI;IAChC,CAAC;IACDgB,WAAW,EAAEA,CAACX,KAAK,EAAEC,MAAoC,KAAK;MAC1DD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO,CAAC,CAAC;MAC9BF,KAAK,CAACR,IAAI,GAAG,IAAI;MACjBQ,KAAK,CAACL,eAAe,GAAG,KAAK;IACjC;EAEJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI,OAAO;EAAEM,QAAQ;EAAEI,aAAa;EAACC,UAAU;EAACJ,eAAe;EAACC,eAAe;EAAEC;AAAa,CAAC,GAAGZ,SAAS,CAACgB,OAAO;AAE9H,eAAehB,SAAS,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}