{"ast":null,"code":"var _jsxFileName = \"/Users/mohammedamsith/Desktop/A/Projects/MERN/Seperate/google auth, mailtrap, node, TypeScript 2 copy  copy/frontend/src/components/view/ChatDashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport profile from '../../pic/profile.png';\nimport '../view/chatDashBoard.css';\nimport { useDispatch } from 'react-redux';\nimport { messageFail } from '../store/userSlice';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatDashboard = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const [getMessage, setGetMessage] = useState([]); // State to store the chat messages\n\n  const [paramsUser, setParamsUser] = useState({});\n  const http = require('http');\n  const server = http.createServer(app);\n  // Initialize the socket connection\n  const io = require('socket.io')(server, {\n    cors: {\n      origin: 'http://localhost:3000',\n      // Frontend URL\n      methods: ['GET', 'POST'],\n      credentials: true // Allow credentials\n    }\n  });\n\n  // send message function\n  const sendMessage = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(`http://localhost:5001/api/message/${id}`, {\n        message\n      }, {\n        withCredentials: true\n      });\n      console.log(response.data);\n\n      // Emit the new message to the server\n      socket.emit('sendMessage', response.data.newMessage);\n      setMessage('');\n    } catch (error) {\n      var _axiosError$response;\n      // Typecast error as AxiosError to access its properties\n      const axiosError = error; // Cast as `any` if you're unsure\n      const errorResponse = axiosError === null || axiosError === void 0 ? void 0 : (_axiosError$response = axiosError.response) === null || _axiosError$response === void 0 ? void 0 : _axiosError$response.data.message;\n\n      // Dispatch error message if it exists\n      if (errorResponse === 'Please login to access') {\n        dispatch(messageFail(errorResponse));\n        navigate('/');\n      } else {\n        console.error('An unexpected error occurred:', error);\n      }\n    }\n  };\n\n  // fetching messages and param user to sho the name\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5001/api/message/${id}`, {\n          withCredentials: true\n        });\n        setGetMessage(response.data.messages); // Store retrieved messages\n        setParamsUser(response.data.paramsUser); // Store retrieved messages\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n    fetchMessages();\n\n    // Listen for new messages from the server\n    socket.on('receiveMessage', newMessage => {\n      console.log('New message received:', newMessage);\n      setGetMessage(prevMessages => [...prevMessages, newMessage]);\n    });\n\n    // Clean up the socket connection when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, [id, socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header border-bottom d-flex align-items-center p-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: profile,\n        alt: \"User Profile\",\n        className: \"profile-img\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"ms-3\",\n        children: paramsUser.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container p-3\",\n      children: getMessage.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.senderID === id ? 'receiver-message' : 'sender-message ms-auto'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"message-text\",\n          children: message.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), new Date(message.createdAt).toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: true\n        })]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-input-container p-2 d-flex align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control me-2\",\n          placeholder: \"Type your message...\",\n          value: message,\n          onChange: e => setMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatDashboard, \"MlKO/9SazsbL6bE/V3jKkzpWz0U=\", false, function () {\n  return [useDispatch, useNavigate, useParams];\n});\n_c = ChatDashboard;\nexport default ChatDashboard;\nvar _c;\n$RefreshReg$(_c, \"ChatDashboard\");","map":{"version":3,"names":["React","useEffect","useState","profile","useDispatch","messageFail","useNavigate","useParams","axios","jsxDEV","_jsxDEV","ChatDashboard","_s","message","setMessage","dispatch","navigate","id","getMessage","setGetMessage","paramsUser","setParamsUser","http","require","server","createServer","app","io","cors","origin","methods","credentials","sendMessage","e","preventDefault","response","post","withCredentials","console","log","data","socket","emit","newMessage","error","_axiosError$response","axiosError","errorResponse","fetchMessages","get","messages","on","prevMessages","disconnect","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","username","map","index","senderID","Date","createdAt","toLocaleTimeString","hour","minute","hour12","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/mohammedamsith/Desktop/A/Projects/MERN/Seperate/google auth, mailtrap, node, TypeScript 2 copy  copy/frontend/src/components/view/ChatDashboard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport profile from '../../pic/profile.png';\nimport '../view/chatDashBoard.css';\nimport { useDispatch } from 'react-redux';\nimport { messageFail } from '../store/userSlice';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport io from 'socket.io-client';\n\n\nconst ChatDashboard = () => {\n\n\n  const [message, setMessage] = useState<string>('');\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const { id } = useParams()\n  const [getMessage, setGetMessage] = useState<any[]>([]); // State to store the chat messages\n\n  const [paramsUser, setParamsUser] = useState<any>({});\n  \n  const http = require('http');\n  const server = http.createServer(app);\n  // Initialize the socket connection\n  const io = require('socket.io')(server, {\n    cors: {\n      origin: 'http://localhost:3000', // Frontend URL\n      methods: ['GET', 'POST'],\n      credentials: true, // Allow credentials\n    },\n  });\n\n  // send message function\n  const sendMessage = async (e: any) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\n        `http://localhost:5001/api/message/${id}`,\n        { message },\n        { withCredentials: true }\n      );\n      console.log(response.data);\n\n      // Emit the new message to the server\n      socket.emit('sendMessage', response.data.newMessage);\n\n      setMessage('')\n\n    } catch (error) {\n      // Typecast error as AxiosError to access its properties\n      const axiosError = error as any; // Cast as `any` if you're unsure\n      const errorResponse = axiosError?.response?.data.message;\n\n      // Dispatch error message if it exists\n      if (errorResponse === 'Please login to access') {\n        dispatch(messageFail(errorResponse));\n        navigate('/')\n      } else {\n        console.error('An unexpected error occurred:', error);\n      }\n    }\n  };\n\n\n  // fetching messages and param user to sho the name\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5001/api/message/${id}`, {\n          withCredentials: true,\n        });\n        setGetMessage(response.data.messages); // Store retrieved messages\n        setParamsUser(response.data.paramsUser); // Store retrieved messages\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    };\n\n    fetchMessages();\n\n    // Listen for new messages from the server\n    socket.on('receiveMessage', (newMessage: any) => {\n      console.log('New message received:', newMessage);\n      setGetMessage((prevMessages) => [...prevMessages, newMessage]);\n    });\n\n    // Clean up the socket connection when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, [id, socket]);\n\n\n  return (\n    <div className=\"chat-dashboard-container\">\n      {/* Profile Header */}\n      <div className=\"header border-bottom d-flex align-items-center p-3\">\n        <img src={profile} alt=\"User Profile\" className=\"profile-img\" />\n        <h5 className=\"ms-3\">{paramsUser.username}</h5> \n        \n      </div>\n\n      {/* Messages Section */}\n      <div className=\"messages-container p-3\">\n        {getMessage.map((message, index) => (\n          <div\n            key={index}\n            className={`message ${message.senderID === id ? 'receiver-message' : 'sender-message ms-auto'}`}\n          >\n            <p className=\"message-text\">{message.message}</p>\n            {new Date(message.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })}\n          </div>\n        ))}\n      </div>\n\n\n      <form onSubmit={sendMessage}>\n        <div className=\"message-input-container p-2 d-flex align-items-center\">\n          <input\n            type=\"text\"\n            className=\"form-control me-2\"\n            placeholder=\"Type your message...\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n          <button type='submit' className=\"btn btn-primary\">Send</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatDashboard;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}